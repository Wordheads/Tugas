/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "stdio.h"

//	Semua fungsi untuk LCD dan dokumentasinya ada di myLCD.h
#include "myLCD.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
//	Kamu dapat menggunakan fungsi HAL atau menggunakan macro yang disediakan.

/*
 * @brief	Macro untuk Input tombol, 0 jika dilepas, 1 jika ditekan
 */
#define SW1			(!HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin))
#define SW2			(!HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin))
#define SW3			(!HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin))
#define SW4			(!HAL_GPIO_ReadPin(SW4_GPIO_Port, SW4_Pin))
#define SW5			(!HAL_GPIO_ReadPin(SW5_GPIO_Port, SW5_Pin))

/*
 * @brief	Macro untuk Output
 * @param	x		0 untuk membuat pin out menjadi LOW, 1 menjadikan pin out menjadi high
 *
 * @retval	None
 */
#define	CLOCK(x)	HAL_GPIO_WritePin(CLOCK_GPIO_Port, CLOCK_Pin, x)
#define	LATCH(x)	HAL_GPIO_WritePin(LATCH_GPIO_Port, LATCH_Pin, x)
#define	DATA(x)		HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, x)
#define BUZZER(x)	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, x)

/*
 * @brief	Macro untuk Output LED 33
 * @param	x		1 LED ON, 0 LED OFF
 *
 * @retval	None
 */
#define RED(x)		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, !x)
#define GREEN(x)	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, !x)
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

/* USER CODE BEGIN PV */
uint8_t menu;
//	Variabel untuk buffer data pengiriman LCD
char lcd_buffer[32];

/*	Variabel untuk menyimpan waktu saat ini
	Kamu bisa membuat variable lain untuk menyimpan perubahan
	antara 2 waktu, dengan menguranginya.
	jika (millis_tick - last_millis > 1000) ===> sudah 1 detik
 */
uint32_t millis_tick;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/*
  * @brief  Fungsi untuk mendapatkan waktu pada variable millis_tick
  *
  * @param  None
  * @note:	Value pada millis_tick adalah waktu running mikrokontroler
  *			dalam satuan milisekon.
  *
  * @retval None
  */
void get_millis(void) {
	millis_tick = HAL_GetTick();
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

	/*DE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_ADC1_Init();
  /* USER CODE BEGIN 2 */

  //	Inisialisasi LED
  RED(0);
  GREEN(0);

  //	Inisialisasi LCD
  LCD_Init();
  LCD_SetBacklight(1);

  LCD_SetCursor(6, 1);
    LCD_Print("TAUFIQ");
    LCD_SetCursor(3, 2);
    LCD_Print("KELAS X TE 2");
    HAL_Delay(1000);
    LCD_Clear();
    LCD_SetCursor(5, 1);
    LCD_Print("PELATIHAN");
    LCD_SetCursor(7, 2);
    LCD_Print("LKS");
    HAL_Delay(1000);
    LCD_Clear();
    LCD_SetCursor(7,0);
    LCD_Print("PESERTA");

    while (1)
    {
  	  if( SW2 ==1 ){
  		  menu++;
  	  }
  	  if( SW1 ==1){
  	  	  menu--;
  	  }
  	  if( SW3 ==1){
  	  	  menu = menu+10;
  	  }
  	  if( SW4 ==1){
  	 	  menu = menu-20;
  	 	  LCD_SetCursor(0,1);
          LCD_Print("                      ");
  	 	  LCD_SetCursor(0,2);
  	      LCD_Print("                      ");
  	      menu++;

  	  }
  	if(menu == 0 ){
  		LCD_SetCursor(7,0);
  		    LCD_Print("PESERTA");
  			HAL_Delay(300);
  			  LCD_SetCursor(0, 1);
  			  LCD_Print("1.Ali");
  			RED(1);
  			GREEN(0);
  		}
  		if(menu == 1){
  			LCD_SetCursor(7,0);
  			    LCD_Print("PESERTA");
  			HAL_Delay(300);
  			  LCD_SetCursor(0, 1);
  			  LCD_Print("2.Taufiq");
  			  RED(0);
  			  GREEN(1);
  		}
  		if(menu == 2){
  			LCD_SetCursor(7,0);
  			    LCD_Print("PESERTA");
  			HAL_Delay(300);
  			  LCD_SetCursor(0, 1);
  			  LCD_Print("3.Sharon");
  			RED(1);
  			GREEN(0);
  		}
  		if(menu == 3){
  			LCD_SetCursor(7,0);
  			    LCD_Print("PESERTA");
  			HAL_Delay(300);
  			  LCD_SetCursor(0, 1);
  			  LCD_Print("4.Althaf");
    			RED(0);
    			GREEN(1);

  		}
  		if(menu == 4){
  			LCD_SetCursor(7,0);
  			    LCD_Print("PESERTA");
  				HAL_Delay(300);
  				  LCD_SetCursor(0, 1);
  				  LCD_Print("5.Arya   ");
  	  			RED(1);
  	  			GREEN(0);
  		}
  		if(menu == 5){
  			LCD_SetCursor(7,0);
  			    LCD_Print("PESERTA");
  				HAL_Delay(300);
  				  LCD_SetCursor(0, 1);
  				  LCD_Print("6.Naila  ");
  	  			RED(0);
  	  			GREEN(1);
  		}
  		if(menu == 10){
  			HAL_Delay(300);
  			 LCD_SetCursor(0, 1);
  			  LCD_Print("FAHRI ALI    ");
  			  LCD_SetCursor(0, 2);
  			  LCD_Print("17/03/2009");
  			HAL_Delay(2000);
  				  	LCD_Clear();
  				  	menu = 0;
  		}
  		if(menu == 11){
  			HAL_Delay(300);
  			 LCD_SetCursor(0, 1);
  			  LCD_Print("TAUFIQ ALHAKIM    ");
  			  LCD_SetCursor(0, 2);
  			  LCD_Print("19/03/2009");
  			HAL_Delay(2000);
  				  	LCD_Clear();
  				  	menu = 1;
  		}
  		if(menu == 12){
  			    HAL_Delay(300);
  				 LCD_SetCursor(0, 1);
  				  LCD_Print("SHARON STEFHANIE");
  				  LCD_SetCursor(0, 2);
  				  LCD_Print("18/11/2006");
  				HAL_Delay(2000);
  					  	LCD_Clear();
  					  	menu = 2;
  		}
  		if(menu == 13){
  				HAL_Delay(300);
  				 LCD_SetCursor(0, 1);
  				  LCD_Print("ALTHAF RASYA W    ");
  				  LCD_SetCursor(0, 2);
  				  LCD_Print("24/12/2007");
  				HAL_Delay(2000);
  					  	LCD_Clear();
  					  	menu = 3;
  		}
  		if(menu == 14){
  		  		HAL_Delay(300);
  		  		 LCD_SetCursor(0, 1);
  				  LCD_Print("AGA ARYA       ");
  				  LCD_SetCursor(0, 2);
  		  		  LCD_Print("06/02/2008");
  		  		HAL_Delay(2000);
  		  			  	LCD_Clear();
  		  			  	menu = 4;
  		}
  		if(menu == 15){
  				HAL_Delay(300);
  				 LCD_SetCursor(0, 1);
  				  LCD_Print("NAILA AYU S.      ");
  				  LCD_SetCursor(0, 2);
  				  LCD_Print("09/01/2008");
  				HAL_Delay(2000);
  				  		  			  	LCD_Clear();
  				  		  			  	menu = 5;
  		}
  		if(menu > 15){
  		menu = 0;
  		}
    }
  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */


/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_D4_Pin|LCD_D5_Pin|LATCH_Pin|DATA_Pin
                          |CLOCK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin|BUZZER_Pin|LED_GREEN_Pin|LED_RED_Pin
                          |LCD_BL_Pin|LCD_EN_Pin|LCD_RW_Pin|LCD_RS_Pin
                          |LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SW1_Pin SW2_Pin SW3_Pin SW4_Pin
                           SW5_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin|SW4_Pin
                          |SW5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : LCD_D4_Pin LCD_D5_Pin LATCH_Pin DATA_Pin
                           CLOCK_Pin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LATCH_Pin|DATA_Pin
                          |CLOCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : LCD_D6_Pin BUZZER_Pin LED_GREEN_Pin LED_RED_Pin
                           LCD_BL_Pin LCD_EN_Pin LCD_RW_Pin LCD_RS_Pin
                           LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_D6_Pin|BUZZER_Pin|LED_GREEN_Pin|LED_RED_Pin
                          |LCD_BL_Pin|LCD_EN_Pin|LCD_RW_Pin|LCD_RS_Pin
                          |LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
